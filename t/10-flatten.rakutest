use v6.d;

use lib './lib';
use lib '.';

use Data::Reshapers;

use Test;

my @list = [4, [5, [8, 9, [4, 5, 5, 2]], 2], [2, 3], 3];
my @list2 = [[[5, 8], [5, 9]], [[4, 5], [2, 3]]];

plan 13;

is flatten([]), ().Seq, '[]';

is flatten(<a,>), "a,", "<a>";

is flatten([<a>, <b c>]), ("a", "b", "c").Seq;

is flatten(@list), (4, 5, 8, 9, 4, 5, 5, 2, 2, 2, 3, 3).Seq, '@list';

is flatten(@list, max-level => 0), [4, [5, [8, 9, [4, 5, 5, 2]], 2], [2, 3], 3];

is flatten(@list, max-level => 1), (4, 5, $[8, 9, [4, 5, 5, 2]], 2, 2, 3, 3).Seq;

is-deeply flatten(@list, max-level => 2), (4, 5, 8, 9, $[4, 5, 5, 2], 2, 2, 3, 3).Seq;

is flatten(@list, max-level => Inf), (4, 5, 8, 9, 4, 5, 5, 2, 2, 2, 3, 3).Seq;

is flatten(@list2), (5, 8, 5, 9, 4, 5, 2, 3).Seq;

is flatten(@list2, max-level => 1), ($[5, 8], $[5, 9], $[4, 5], $[2, 3]).Seq;

dies-ok { flatten(@list, max-level => -3) };

is-deeply flatten(@list, 2), flatten(@list, max-level => 2);

is-deeply flatten(@list2, 1), flatten(@list2, max-level => 1);

done-testing;
