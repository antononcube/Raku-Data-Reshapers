use Test;

use Data::Reshapers;

# The test data was generated with the package Data::Generators.
# my @a = random-tabular-dataset(6, <A B C>, generators=>['gala'.comb.List, 'sin'.comb.List, [3,4,5]]);
# my @b = random-tabular-dataset(8, <A D E>, generators=>['lalab'.comb.List, 'rick'.comb.List, [13,14,15]]);
# say to-pretty-table(@a);
# say to-pretty-table(@b);

my @a = [{ :A("g"), :B("n"), :C(4) },
         { :A("a"), :B("i"), :C(4) },
         { :A("l"), :B("n"), :C(3) },
         { :A("g"), :B("i"), :C(3) },
         { :A("a"), :B("n"), :C(5) },
         { :A("a"), :B("n"), :C(5) }];

my @b = [{ :A("a"), :D("k"), :E(15) },
         { :A("b"), :D("k"), :E(13) },
         { :A("a"), :D("r"), :E(15) },
         { :A("l"), :D("k"), :E(13) },
         { :A("a"), :D("i"), :E(13) },
         { :A("l"), :D("k"), :E(15) },
         { :A("a"), :D("i"), :E(13) },
         { :A("l"), :D("i"), :E(13) }];

plan 9;

## 1
my @res1 =
        (${:A("a"), :B("i"), :C(4), :D("i"), :E(13)},
         ${:A("a"), :B("i"), :C(4), :D("i"), :E(13)},
         ${:A("a"), :B("i"), :C(4), :D("k"), :E(15)},
         ${:A("a"), :B("i"), :C(4), :D("r"), :E(15)},
         ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
         ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
         ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
         ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
         ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)},
         ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)},
         ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)},
         ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)},
         ${:A("l"), :B("n"), :C(3), :D("i"), :E(13)},
         ${:A("l"), :B("n"), :C(3), :D("k"), :E(13)},
         ${:A("l"), :B("n"), :C(3), :D("k"), :E(15)});

is-deeply
        join-across(@a, @b, 'A', join-spec => 'Inner').sort,
        @res1.sort,
        'join across inner';

## 2
my @res2 = (${:A("a"), :B("i"), :C(4), :D("i"), :E(13)}, ${:A("a"), :B("i"), :C(4), :D("i"), :E(13)},
            ${:A("a"), :B("i"), :C(4), :D("k"), :E(15)}, ${:A("a"), :B("i"), :C(4), :D("r"), :E(15)},
            ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)}, ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
            ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)}, ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
            ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)}, ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)},
            ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)}, ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)},
            ${:A("g"), :B("i"), :C(3)}, ${:A("g"), :B("n"), :C(4)},
            ${:A("l"), :B("n"), :C(3), :D("i"), :E(13)}, ${:A("l"), :B("n"), :C(3), :D("k"), :E(13)},
            ${:A("l"), :B("n"), :C(3), :D("k"), :E(15)});

is-deeply
        join-across(@a, @b, 'A', join-spec => 'Left', :!fill).sort,
        @res2.sort,
        'join across left, no fill';


## 3

# Same as @res2 except the added :D('Whatever'), :E('Whatever') .
my @res3 = (${:A("a"), :B("i"), :C(4), :D("i"), :E(13)}, ${:A("a"), :B("i"), :C(4), :D("i"), :E(13)},
            ${:A("a"), :B("i"), :C(4), :D("k"), :E(15)}, ${:A("a"), :B("i"), :C(4), :D("r"), :E(15)},
            ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)}, ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
            ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)}, ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
            ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)}, ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)},
            ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)}, ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)},
            ${:A("g"), :B("i"), :C(3), :D('Whatever'), :E('Whatever')}, ${:A("g"), :B("n"), :C(4), :D('Whatever'), :E('Whatever')},
            ${:A("l"), :B("n"), :C(3), :D("i"), :E(13)}, ${:A("l"), :B("n"), :C(3), :D("k"), :E(13)},
            ${:A("l"), :B("n"), :C(3), :D("k"), :E(15)});

is-deeply
        join-across(@a, @b, 'A', join-spec => 'Left', :fill, missing-value => 'Whatever').sort,
        @res3.sort,
        'join across left, with fill';


## 4

my @res4 = (${:A("a"), :B("i"), :C(4), :D("i"), :E(13)}, ${:A("a"), :B("i"), :C(4), :D("i"), :E(13)},
            ${:A("a"), :B("i"), :C(4), :D("k"), :E(15)}, ${:A("a"), :B("i"), :C(4), :D("r"), :E(15)},
            ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)}, ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
            ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)}, ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
            ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)}, ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)},
            ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)}, ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)},
            ${:A("b"), :D("k"), :E(13)}, ${:A("l"), :B("n"), :C(3), :D("i"), :E(13)},
            ${:A("l"), :B("n"), :C(3), :D("k"), :E(13)}, ${:A("l"), :B("n"), :C(3), :D("k"), :E(15)});

is-deeply
        join-across(@a, @b, 'A', join-spec => 'Right', :!fill).sort,
        @res4.sort,
        'join across right, with no fill';


## 5

my @res5 = (${:A("a"), :B("i"), :C(4), :D("i"), :E(13)}, ${:A("a"), :B("i"), :C(4), :D("i"), :E(13)},
            ${:A("a"), :B("i"), :C(4), :D("k"), :E(15)}, ${:A("a"), :B("i"), :C(4), :D("r"), :E(15)},
            ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)}, ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
            ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)}, ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
            ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)}, ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)},
            ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)}, ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)},
            ${:A("b"), :B('Whatever'), :C('Whatever'), :D("k"), :E(13)}, ${:A("l"), :B("n"), :C(3), :D("i"), :E(13)},
            ${:A("l"), :B("n"), :C(3), :D("k"), :E(13)}, ${:A("l"), :B("n"), :C(3), :D("k"), :E(15)});

is-deeply join-across(@a, @b, 'A', join-spec => 'Right', :fill, missing-value => 'Whatever').sort,
        @res5.sort,
        'join across right, with fill';


## 6
my @res6 = (${:A("a"), :B("i"), :C(4), :D("i"), :E(13)}, ${:A("a"), :B("i"), :C(4), :D("i"), :E(13)},
            ${:A("a"), :B("i"), :C(4), :D("k"), :E(15)}, ${:A("a"), :B("i"), :C(4), :D("r"), :E(15)},
            ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)}, ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
            ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)}, ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
            ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)}, ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)},
            ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)}, ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)},
            ${:A("b"), :D("k"), :E(13)}, ${:A("g"), :B("i"), :C(3)},
            ${:A("g"), :B("n"), :C(4)}, ${:A("l"), :B("n"), :C(3), :D("i"), :E(13)},
            ${:A("l"), :B("n"), :C(3), :D("k"), :E(13)}, ${:A("l"), :B("n"), :C(3), :D("k"), :E(15)});

is-deeply join-across(@a, @b, 'A', join-spec => 'Outer', :!fill).sort,
        @res6.sort,
        'join across outer, with fill';

## 7

my @res7 = (${:A("a"), :B("i"), :C(4), :D("i"), :E(13)}, ${:A("a"), :B("i"), :C(4), :D("i"), :E(13)},
            ${:A("a"), :B("i"), :C(4), :D("k"), :E(15)}, ${:A("a"), :B("i"), :C(4), :D("r"), :E(15)},
            ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)}, ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
            ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)}, ${:A("a"), :B("n"), :C(5), :D("i"), :E(13)},
            ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)}, ${:A("a"), :B("n"), :C(5), :D("k"), :E(15)},
            ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)}, ${:A("a"), :B("n"), :C(5), :D("r"), :E(15)},
            ${:A("b"), :B('Whatever'), :C('Whatever'), :D("k"), :E(13)}, ${:A("g"), :B("i"), :C(3), :D('Whatever'), :E('Whatever')},
            ${:A("g"), :B("n"), :C(4), :D('Whatever'), :E('Whatever')}, ${:A("l"), :B("n"), :C(3), :D("i"), :E(13)},
            ${:A("l"), :B("n"), :C(3), :D("k"), :E(13)}, ${:A("l"), :B("n"), :C(3), :D("k"), :E(15)});

is-deeply join-across(@a, @b, 'A', join-spec => 'Outer', :fill, missing-value => 'Whatever').sort,
        @res7.sort,
        'join across outer, with fill';

## 8
is-deeply join-across(@a, @b, 'A', join-spec => 'Semi').sort,
        [{ :A("a"), :B("i"), :C(4) },
         { :A("l"), :B("n"), :C(3) },
         { :A("a"), :B("n"), :C(5) },
         { :A("a"), :B("n"), :C(5) }].sort,
        'join across semi';

## 9
is-deeply join-across(@a, @b, 'A', join-spec => 'Anti').sort,
        [{ :A("g"), :B("n"), :C(4) },
         { :A("g"), :B("i"), :C(3) }].sort,
        'join across anti';

done-testing;
